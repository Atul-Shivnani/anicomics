generator client {
  provider = "prisma-client-js"
   previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Like[]
  orders    Order[]
  bag       Bag[]
  address   Address[]
}

model Address {
    id        String   @id @default(cuid())
    userId    String
    user      User @relation(fields: [userId], references: [id])
}

model Collection {
  id          String     @id @default(cuid())
  name        String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    Product[]
  discounts   CollectionDiscount[]
  parentCollectionId String? 
  parentCollection   Collection? @relation("collectionSubCollections", fields: [parentCollectionId], references: [id])
  subCollections  Collection[] @relation("collectionSubCollections")
}

model Category {
  id            String     @id @default(cuid())
  name          String
  description   String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  products      Product[]
  discounts     CategoryDiscount[]
  parentCategoryId String? 
  parentCategory   Category? @relation("CategorySubcategories", fields: [parentCategoryId], references: [id])
  subCategories  Category[] @relation("CategorySubcategories")
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[] @relation("ProductTags")
}


model Bag {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int       @default(1)
  size      String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String   @id @default(cuid())
  orderId       String
  paymentStatus String
  paymentMethod String
  paymentAmount Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Order    @relation(fields: [orderId], references: [id])
}
